#include <stdio.h>
#include <stdlib.h>

typedef struct nodo{
	float num;
	struct nodo *ant;
	struct nodo *prox;
}listaD;

void cadastrarInicio(listaD **inicioListaD, listaD *pListaD,listaD **fimListaD);
void cadastrarFim(listaD **inicioListaD, listaD *pListaD,listaD **fimListaD);
void cadastrarApos(listaD **inicioListaD, listaD *pListaD,listaD **fimListaD);
void cadastrarAntes(listaD **inicioListaD, listaD *pListaD);
void listarIni(listaD **inicioListaD);
void listarFim(listaD **inicioListaD);
void buscar(listaD **inicioListaD, listaD **fimListaD);
void excluir(listaD **inicioListaD, listaD **fimListaD);


int main(){

	listaD *pListaD = NULL, *inicioListaD = NULL, *fimListaD = NULL;
	int op = 1;
	
	while (op != 0){
     
        printf("\n\n\n\t\t--MENU PRINCIPAL--\n");       
        printf("\t1 - Cadastrar no inicio \n");
        printf("\t2 - Cadastrar no fim \n");
        printf("\t3 - Cadastrar apos um numero escolido \n");
        printf("\t4 - Cadastrar antes um numero escolido \n");
        printf("\t5 - Listar do inicio\n");
        printf("\t6 - Listar do fim\n");
        printf("\t7 - Buscar\n");
        printf("\t8 - Excluir\n");
        printf("\t0- Sair\n");
        printf("\n\t");
        scanf("%d", &op);

        switch (op){

            case 1:
                printf("\n\t--------------------------------------------------\n");
                cadastrarInicio(&inicioListaD, pListaD, &fimListaD);
                printf("\n\t--------------------------------------------------\n");
                printf("\n\t");
            break;

            case 2:
                printf("\n\t--------------------------------------------------\n");
                cadastrarFim(&inicioListaD, pListaD, &fimListaD);
                printf("\n\t--------------------------------------------------\n");
                printf("\n\t");
            break;

            case 3:
                printf("\n\t--------------------------------------------------\n");
                cadastrarApos(&inicioListaD, pListaD, &fimListaD);
                printf("\n\t--------------------------------------------------\n");
                printf("\n\t");
            break;

            case 4:
                printf("\n\t--------------------------------------------------\n");
                cadastrarAntes(&inicioListaD, pListaD);
                printf("\n\t--------------------------------------------------\n");
                printf("\n\t");
            break;

            case 5:
                printf("\n\t--------------------------------------------------\n");
                listarIni(&inicioListaD);
                printf("\n\t--------------------------------------------------\n");
                printf("\n\t");
            break;

            case 6:
                printf("\n\t--------------------------------------------------\n");
                listarFim(&fimListaD);
                printf("\n\t--------------------------------------------------\n");
                printf("\n\t");
            break;

            case 7:
                printf("\n\t--------------------------------------------------\n");
                buscar(&inicioListaD,&fimListaD);
                printf("\n\t--------------------------------------------------\n");
                printf("\n\t");
            break;

            case 8:
                printf("\n\t--------------------------------------------------\n");
                excluir(&inicioListaD,&fimListaD);
                printf("\n\t--------------------------------------------------\n");
                printf("\n\t");
            break;

        }
    }


	printf("\n\nDigite um enter para continuar..."); //printf indica ao final do programa
	__fpurge(stdin);	//limpa o buffer do teclado
	getchar();	//continua o programa se inserir alguma coisa
	exit(1); //encerra o programa e indica se houve algum erro
	return 0;
}

void cadastrarInicio(listaD **inicioListaD, listaD *pListaD,listaD **fimListaD){
	listaD *pAux;
	float num;

	pListaD = (listaD*)malloc(sizeof(listaD));

	if(pListaD){
		printf("\nDigite o numero a ser cadastrado: ");
		scanf("%f", &num);

		if(*inicioListaD == NULL){
			*inicioListaD = pListaD;
			pListaD->num = num;
			pListaD->ant = NULL;
			pListaD->prox = NULL;
			if(pListaD->prox == NULL) *fimListaD = pListaD;
		}else{
			pAux = *inicioListaD;
			pAux->ant = pListaD;
			*inicioListaD = pListaD;
			pListaD->num = num;
			pListaD->prox = pAux;
			if(pListaD->prox == NULL) *fimListaD = pListaD;
		}

	}else printf("Erro ao alocar memoria para a lista (malloc)\n");
}

void cadastrarFim(listaD **inicioListaD, listaD *pListaD,listaD **fimListaD){
	listaD *pAux;
	float num;

	pListaD = (listaD*)malloc(sizeof(listaD));

	if(pListaD){
		printf("\nDigite o numero a ser cadastrado: ");
		scanf("%f", &num);

		if(*inicioListaD == NULL){
			*inicioListaD = pListaD;
			pListaD->num = num;
			pListaD->ant = NULL;
			pListaD->prox = NULL;
			if(pListaD->prox == NULL) *fimListaD = pListaD;
		}else{

			pAux = *inicioListaD;
			while(pAux->prox != NULL) pAux = pAux->prox;

			pListaD->ant = pAux;
			pListaD->prox = NULL;
			pListaD->num = num;
			pAux->prox =pListaD;
			if(pListaD->prox == NULL) *fimListaD = pListaD;
		}

	}else printf("Erro ao alocar memoria para a lista (malloc)\n");
}

void cadastrarApos(listaD **inicioListaD, listaD *pListaD,listaD **fimListaD){
	listaD *pAux, *pAux2;
	float num, aux;

	pListaD = (listaD*)malloc(sizeof(listaD));

	if(pListaD){
		printf("\nDigite o numero a ser cadastrado: ");
		scanf("%f", &num);

		if(*inicioListaD == NULL){
			*inicioListaD = pListaD;
			pListaD->num = num;
			pListaD->ant = NULL;
			pListaD->prox = NULL;
			if(pListaD->prox == NULL) *fimListaD = pListaD;
		}else{

			printf("\nDigite apos qual numero deve ser cadastrado: ");
			scanf("%f", &aux);
			
			pAux = *inicioListaD;
			while(pAux->prox != NULL){
				if(pAux->num == aux) break;
				else pAux = pAux->prox;
			}

			if(pAux->num == aux){

				pListaD->num = num;
				pListaD->ant = pAux;
				pListaD->prox = pAux->prox;

				pAux2 = pAux->prox;
				if(pAux2 != NULL) pAux2->ant = pListaD;

				pAux->prox = pListaD;

				if(pListaD->prox == NULL) *fimListaD = pListaD;

			}else printf("Numero nao encontrado!\n");
		}
	}else printf("Erro ao alocar memoria para a lista (malloc)\n");
}

void cadastrarAntes(listaD **inicioListaD, listaD *pListaD){
	listaD *pAux, *pAux2;
	float num, aux;

	pListaD = (listaD*)malloc(sizeof(listaD));

	if(pListaD){
		printf("\nDigite o numero a ser cadastrado: ");
		scanf("%f", &num);

		if(*inicioListaD == NULL){
			*inicioListaD = pListaD;
			pListaD->num = num;
			pListaD->ant = NULL;
			pListaD->prox = NULL;
		}else{

			printf("\nDigite antes de qual numero deve ser cadastrado: ");
			scanf("%f", &aux);
			
			pAux = *inicioListaD;
			pAux2 = *inicioListaD;
			while(pAux->prox != NULL){
				pAux2 = pAux->prox;
				if(pAux2->num == aux || pAux->num == aux) break;
				else pAux = pAux->prox;
			}

			if(pAux->num == aux){
					pAux = *inicioListaD;
					pAux->ant = pListaD;
					*inicioListaD = pListaD;
					pListaD->num = num;
					pListaD->prox = pAux;
			}else if(pAux2->num == aux){

				pListaD->num = num;
				pListaD->ant = pAux;
				pListaD->prox = pAux->prox;

				pAux2 = pAux->prox;
				if(pAux2 != NULL) pAux2->ant = pListaD;

				pAux->prox = pListaD;

			} else printf("Numero nao encontrado!\n");
		}
	}else printf("Erro ao alocar memoria para a lista (malloc)\n");
}

void listarIni(listaD **inicioListaD){
	listaD *pAux;

	if (*inicioListaD == NULL) {

		printf("\nLista Vazia");

	} else {

		pAux = *inicioListaD;

		while (pAux != NULL) {
			printf("\n\t\tAtual: %p", pAux);
			printf("\n\t\tNumero: %.2f", pAux->num);
			printf("\n\t\tAnterior: %p", pAux->ant);
			printf("\n\t\tProximo: %p\n", pAux->prox);
			pAux = pAux->prox;
		}

	}
}

void listarFim(listaD **fimListaD){
	listaD *pAux;

	if (*fimListaD == NULL) {

		printf("\nLista Vazia");

	} else {

		pAux = *fimListaD;
		while (pAux != NULL) {
			printf("\n\t\tAtual: %p", pAux);
			printf("\n\t\tNumero: %.2f", pAux->num);
			printf("\n\t\tAnterior: %p", pAux->ant);
			printf("\n\t\tProximo: %p\n", pAux->prox);
			pAux = pAux->ant;
		}

	}
}

void buscar(listaD **inicioListaD, listaD **fimListaD){		//Realiza uma busca dupla pra ser mais rapido, comeÃ§a no inicio e no fim ao mesmo tempo e retorna o primeiro numero igual ao buscado encontrado
	listaD *pAux, *pAux2;
	float bnum;
	int teste=0;

	printf("\nOBSERVACAO PORRA !!!!!!!!! O PRIMEIRO NUMERO IGUAL AO BUSCADO SERA IMPRIMIDO\n");

	if (*inicioListaD == NULL) {

		printf("\nLista Vazia");

	} else {
		printf("\nDigite o numero a ser buscado: ");
		scanf("%f", &bnum);

		pAux = *inicioListaD;
		pAux2 = *fimListaD;

		while (pAux->ant != pAux2) {
			if(pAux->num == bnum){
				printf("Primeiro numero %.2f encontrado!\n", bnum );
				printf("\n\t\tAtual: %p", pAux);
				printf("\n\t\tNumero: %.2f", pAux->num);
				printf("\n\t\tAnterior: %p", pAux->ant);
				printf("\n\t\tProximo: %p\n", pAux->prox);
				teste = 1;
				break;
			}else if(pAux2->num == bnum){
				printf("Primeiro numero %.2f encontrado!\n", bnum );
				printf("\n\t\tAtual: %p", pAux2);
				printf("\n\t\tNumero: %.2f", pAux2->num);
				printf("\n\t\tAnterior: %p", pAux2->ant);
				printf("\n\t\tProximo: %p\n", pAux2->prox);
				teste = 1;
				break;
			}
			pAux = pAux->prox;
			pAux2 = pAux2->ant;
		}

		if(teste==0) printf("Numero %.2f nao encontrado\n", bnum);

	}
}

void excluir(listaD **inicioListaD, listaD **fimListaD){
	listaD *pAux, *pAux2,*pAux3;
	float bnum;
	int teste=0;

	printf("\nOBSERVACAO PORRA !!!!!!!!! O PRIMEIRO NUMERO IGUAL AO BUSCADO SERA EXCLUIDO\n");

	if (*inicioListaD == NULL) {

		printf("\nLista Vazia");

	} else {
		printf("\nDigite o numero a ser buscado para ser excluido: ");
		scanf("%f", &bnum);

		pAux = *inicioListaD;
		pAux2 = *fimListaD;

		while (pAux->ant != pAux2) {
			if(pAux->num == bnum){
				if(pAux->ant == NULL){
					pAux3 = pAux->prox;
					pAux3->ant = NULL;
					*inicioListaD = pAux3;
				}else{
					pAux3 = pAux->ant;
					pAux3->prox = pAux->prox;
				}

				pAux3 = pAux->prox;
				pAux3->ant = pAux->ant;

				pAux = NULL;
				free(pAux);

				teste = 1;

				break;
			}else if(pAux2->num == bnum){
				if(pAux2->prox == NULL){
					pAux3 = pAux2->ant;
					pAux3->prox = NULL;
					*fimListaD = pAux3;
				}else{
					pAux3 = pAux2->prox;
					pAux3->ant = pAux2->ant;
				}

				pAux3 = pAux2->ant;
				pAux3->prox = pAux2->prox;

				pAux2 = NULL;
				free(pAux2);

				teste = 1;
				break;
			}
			pAux = pAux->prox;
			pAux2 = pAux2->ant;
		}

		if(teste==0) printf("Numero %.2f nao encontrado\n", bnum);

	}
}